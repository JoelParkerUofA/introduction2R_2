[["index.html", "Introduction 2 R Chapter 1 The Prerequisites 1.1 Why use R and R Studio 1.2 Wrote by the people for the people 1.3 R has a large community 1.4 R produces high-quality graphics 1.5 Open Source", " Introduction 2 R Joel Parker 2021-05-16 Chapter 1 The Prerequisites This is an intro to R workshop for coders with little or no experience using R. Of course all levels or R users are welcome to attend and engage in the content. In this work shop we will learn basic R functions, reading help files, creating and importing data frames, for loops, while loops, and creating functions. The material covered in this workshop closely follows the 2020 ResBaz intro to R course found here https://picoral.github.io/resbaz_intro_to_r/index.html 1.1 Why use R and R Studio 1.1.1 More coding, and less point and click The results in R rely on a series of well defined commands rather than just pointing and clicking. This can allow you to have a better understanding and control of the results. The steps taken in the analysis can be saved making it fast to run the analysis again. This makes statisitical analysis easily reproducible, which is important when conducting research. 1.2 Wrote by the people for the people There are 10,000 + packages that can be used in R. Packages are easy to download and implement. If you cant find a package for your specific need, then you can create your own for yourself and others to use. 1.3 R has a large community Thousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow. 1.4 R produces high-quality graphics packages like ggplot allow users to create high quality graphics like the one below. 1.5 Open Source Anyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs. "],["installing-r-and-r-studio.html", "Chapter 2 Installing R and R Studio 2.1 Installing R and R studio 2.2 I already have R and RStudio installed.", " Chapter 2 Installing R and R Studio If you are running your R code in your computer, you need to install both R and RStudio. Alternatively, you can create a free account at http://rstudio.cloud and run your R code in the cloud. Either way, we will be using the same IDE (i.e., RStudio). div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Whats an IDE? IDE stands for integrated development environment, and its goal is to facilitate coding by integrating a text editor, a console and other tools into one window. 2.1 Installing R and R studio Download and install R from https://cran.r-project.org Download and install RStudio from https://rstudio.com/products/rstudio/download/#download 2.2 I already have R and RStudio installed. Open RStudio Check your R version by entering sessionInfo() on your console. The latest release for R was April 24, 2020 (R version 4.0.0, 2020-04-24, Arbor Day). If your R version is older than the most recent version, please follow step 1 in the previous section to update R. Check your RStudio version, if your version is older than Version 1.2.5042, please follow step 2 in the previous section to update RStudio. "],["intro-to-r-part-i.html", "Chapter 3 Intro to R Part I 3.1 Getting to know your IDE", " Chapter 3 Intro to R Part I 3.1 Getting to know your IDE Whats an ? IDE stands for Integrated development Environment, and its goal is to facilitate coding by integrating a text editor, a console and other tools into one window. We are using RStudio as our IDE for this workshop. You can either download and install R and RStudio on your computer (for instructions on how to do so, see the Before we start section) or create a free account at http://rstudio.cloud and run your R code in the cloud. In this part of the workshop we will start an R project and situating ourselves around our IDE. "],["operations-and-objects.html", "Chapter 4 Operations and Objects", " Chapter 4 Operations and Objects Lets start by using R as a calculator. On your console type 3 + 3 and hit enter. 3 + 3 ## [1] 6 Lets save our calculation into an object, by using the assignment symbol &lt;-. sum_result &lt;- 3 + 3 We can treat this new object like a number 3+3+3 ## [1] 9 sum_result +3 ## [1] 9 Look at your global enviroment in the the topright. Your object has been stored to use for the future. Clearing the enviroment will delete all objects in the enviroment. You can also make a vector that hold multiple numbers. Suppose you need to create a vector of dogs ages for 5 dogs. This can be accomplished in the following code. dogs_age &lt;- c(5,3,7,2,1) Then we can multiply all of the elements of a vector (if all elements are numeric). Below we can see how old each dog is in human years. dogs_human_years &lt;- dogs_age* 7 dogs_human_years ## [1] 35 21 49 14 7 4.0.1 Challenge Create a vector of peoples jobs experience with 1,4,6,2,3 and 8 years. Let say if everyone starts out making $60,000 and $5,000 for every year of expirence. How much money is each person curently making? "],["packages.html", "Chapter 5 Packages 5.1 Help files", " Chapter 5 Packages One advantage of the R is there is a big communitee of users. The Comrehensive R Archive Network (CRAN) stores packaged bundles of code that allow users to have access to many different functions. Packages are easy to down load and use. For starters lets install the ggplot2 package using install.packages(Lahman). Let find out more about the ggplot2 package. 5.1 Help files 5.1.1 Help files for package help(package=&quot;ggplot2&quot;) 5.1.2 Help files for funcitons ?ggplot2::ggplot() or: library(ggplot2) ?ggplot() "],["data-frames.html", "Chapter 6 Data Frames 6.1 loading in data frames from a package 6.2 Saving CSV files. 6.3 Creating data frames in R", " Chapter 6 Data Frames Generally researchers are interested in working with data frames rather than individual vectors. Data frames can be read into R or created within R. 6.1 loading in data frames from a package For this workshop we will be working with data from the Lahmen data base. This can be downloaded as a package using the instructions from above. #install.packages(&quot;Lahmen&quot;) library(Lahman) data(Batting) # Allows you to see the first 6 hitters head(Batting) ## playerID yearID stint teamID lgID G AB R H X2B X3B HR RBI SB CS BB SO IBB HBP SH SF GIDP ## 1 abercda01 1871 1 TRO NA 1 4 0 0 0 0 0 0 0 0 0 0 NA NA NA NA 0 ## 2 addybo01 1871 1 RC1 NA 25 118 30 32 6 0 0 13 8 1 4 0 NA NA NA NA 0 ## 3 allisar01 1871 1 CL1 NA 29 137 28 40 4 5 0 19 3 1 2 5 NA NA NA NA 1 ## 4 allisdo01 1871 1 WS3 NA 27 133 28 44 10 2 2 27 1 1 0 2 NA NA NA NA 0 ## 5 ansonca01 1871 1 RC1 NA 25 120 29 39 11 3 0 16 6 2 2 1 NA NA NA NA 0 ## 6 armstbo01 1871 1 FW1 NA 12 49 9 11 2 1 0 5 0 1 0 1 NA NA NA NA 0 6.2 Saving CSV files. First you want to find your directory. getwd() ## [1] &quot;C:/Users/Owner/Documents/Introduction2R&quot; When you save a file it will be saved to this directory. You can save a csv file with the following code. You can save a csv file with the following code. write.csv(Batting, &quot;battingexample.csv&quot;) 6.3 Creating data frames in R You can also create data frames within R. Here we are creating a data frame with hits and at bats for different players. # create player player &lt;- c(&quot;Player01&quot;, &quot;Player02&quot;, &quot;Player03&quot;, &quot;Player04&quot;,&quot;Player05&quot;) # Create Vector of Hits hits &lt;- c(3,1,0,2,4) # Create Vector of At Bats at_bats &lt;- c(4,4,3,5,4) # Create full data frame hits_data_frame &lt;- data.frame(PlayerID = player, Hits=hits, AtBats = at_bats) hits_data_frame ## PlayerID Hits AtBats ## 1 Player01 3 4 ## 2 Player02 1 4 ## 3 Player03 0 3 ## 4 Player04 2 5 ## 5 Player05 4 4 Note: Every vector used in the data frame must be of equal length. 6.3.1 Challenge Create a data frame within R which stores information about 5 teams. The first column has team name, second column has wins, and the third column has losses. Team name and win/losses can be made up. Store the data with the name step_1. Save this data fram as a .csv file and then upload the saved data stored with the name step_2. "],["manipulating-data-frames-.html", "Chapter 7 Manipulating data frames. 7.1 Slicing a data frame 7.2 Creating new columns", " Chapter 7 Manipulating data frames. Most of the time data does not come us ready to analyze and we must make manipulations to the data frame. Base R has many useful functions that will allow us to do this. 7.1 Slicing a data frame We may intersted in looking at just 1 column or 1 row. We can do this with by specifying the indicies for the rows and columns. full data frame # dataframe[rows, columns] hits_data_frame ## PlayerID Hits AtBats ## 1 Player01 3 4 ## 2 Player02 1 4 ## 3 Player03 0 3 ## 4 Player04 2 5 ## 5 Player05 4 4 # dataframe[rows, columns] hits_data_frame[,] ## PlayerID Hits AtBats ## 1 Player01 3 4 ## 2 Player02 1 4 ## 3 Player03 0 3 ## 4 Player04 2 5 ## 5 Player05 4 4 Note: If we dont specify which rows or columns we want we get the whole data frame back. Second row # dataframe[rows, columns] hits_data_frame[2,] ## PlayerID Hits AtBats ## 2 Player02 1 4 second column hits_data_frame[,2] ## [1] 3 1 0 2 4 Second row of the second column hits_data_frame[2,2] ## [1] 1 We can also use column names to slice data: First lets get the names of the columns in the data frame. names(hits_data_frame) ## [1] &quot;PlayerID&quot; &quot;Hits&quot; &quot;AtBats&quot; Now we can use these column names to select the hits columns. hits_data_frame[,c(&quot;Hits&quot;)] ## [1] 3 1 0 2 4 We can pass a vector of column names if we want more than 1 column. hits_data_frame[,c(&quot;Hits&quot;,&quot;PlayerID&quot;)] ## Hits PlayerID ## 1 3 Player01 ## 2 1 Player02 ## 3 0 Player03 ## 4 2 Player04 ## 5 4 Player05 You can also use the $ sign to specify columns # get player ID column hits_data_frame$PlayerID ## [1] &quot;Player01&quot; &quot;Player02&quot; &quot;Player03&quot; &quot;Player04&quot; &quot;Player05&quot; In the case the column is treated as a vector which can be manipulated. ## select 4th player hits_data_frame$PlayerID[4] ## [1] &quot;Player04&quot; We can also assign a new value here. ## Changing value of a sliced data frame. hits_data_frame$PlayerID[4] &lt;- &quot;PlayerNew&quot; hits_data_frame$PlayerID[4] ## [1] &quot;PlayerNew&quot; Operations can also be also be completed in the brackets to help filter data ## Filtering with which() which(hits_data_frame$PlayerID == &quot;PlayerNew&quot;) ## [1] 4 what this means is player new is the 4th observation. We can filter the whole data frame with. # Hits filtered hits_data_frame[which(hits_data_frame$PlayerID == &quot;PlayerNew&quot;),] ## PlayerID Hits AtBats ## 4 PlayerNew 2 5 7.2 Creating new columns you can create new columns with mathematical operations like \\(+\\),\\(-\\),\\(/\\) and \\(*\\) ### Create new columns with / dividing hits_data_frame$batting_average &lt;- hits_data_frame$Hits / hits_data_frame$AtBats ### Create new columns with - subtracting hits_data_frame$outs &lt;- hits_data_frame$AtBats - hits_data_frame$Hits hits_data_frame ## PlayerID Hits AtBats batting_average outs ## 1 Player01 3 4 0.75 1 ## 2 Player02 1 4 0.25 3 ## 3 Player03 0 3 0.00 3 ## 4 PlayerNew 2 5 0.40 3 ## 5 Player05 4 4 1.00 0 "],["descriptive-states-in-data-frames-.html", "Chapter 8 Descriptive States in data frames.", " Chapter 8 Descriptive States in data frames. mean() - finds the mean of a vector sd() - find the standard deviation median() - finds the median max() - finds the max min() - finds the min range() - returns the range of a vector summary() - give min, 1st quantile, Median, Mean, 3rd Quantile and Max. # average hits mean(hits_data_frame$Hits) ## [1] 2 # standard deviation of hits. sd(hits_data_frame$Hits) ## [1] 1.581139 # median hits median(hits_data_frame$Hits) ## [1] 2 # max hits max(hits_data_frame$Hits) ## [1] 4 # range of hits range(hits_data_frame$Hits) ## [1] 0 4 # Summary statisitics summary(hits_data_frame$Hits) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0 1 2 2 3 4 8.0.1 Challenge Filter the hits_data_frame to to find the person with the highest batting average. Change the playerID best_player "],["for-loops-and-while-loops-.html", "Chapter 9 For loops and while loops.", " Chapter 9 For loops and while loops. Many times we want to loop though the data for perform opperations. For this we can use for loops. for(player in hits_data_frame$PlayerID){ # Print player name with a little introduction print(paste0(&quot;Player Name: &quot; , player)) } ## [1] &quot;Player Name: Player01&quot; ## [1] &quot;Player Name: Player02&quot; ## [1] &quot;Player Name: Player03&quot; ## [1] &quot;Player Name: PlayerNew&quot; ## [1] &quot;Player Name: Player05&quot; We can also do this using a while loop. A while loop continues until a certain contiditon is met. ## Create count variable that will be updated each time through count = 1 ## find amount of rows in the data frame. row_count &lt;- nrow(hits_data_frame) while(count &lt;= row_count){ # Print player name with a little introduction print(paste0(&quot;Player Name: &quot;, hits_data_frame$PlayerID[count])) # Update count count = count+1 } ## [1] &quot;Player Name: Player01&quot; ## [1] &quot;Player Name: Player02&quot; ## [1] &quot;Player Name: Player03&quot; ## [1] &quot;Player Name: PlayerNew&quot; ## [1] &quot;Player Name: Player05&quot; "],["if-block.html", "Chapter 10 If block", " Chapter 10 If block When creating a new column we may want the values of the column to be different depending on some condition. We can do this with an if block. ## We will be creating a player type variabe that shows they are &quot;bad&quot; if batting average &lt; 0.25, good if below 0.75 and great if greater than or equal to 0.75 # Create for loop to look at each player separatly for(i in 1:nrow(hits_data_frame)){ ## isolate player player_average &lt;- hits_data_frame$batting_average[i] ## bad condition if(player_average &lt; 0.25){ ## Assign new bad value to new variable hits_data_frame$player_type[i] &lt;- &quot;bad&quot; } ## Assign new good value to new variable if(player_average &gt;= 0.25 &amp; player_average&lt;0.75){ hits_data_frame$player_type[i] &lt;- &quot;good&quot; } ## Assign great value to new value if(player_average&gt;=0.75){ hits_data_frame$player_type[i] &lt;- &quot;great&quot; } } hits_data_frame ## PlayerID Hits AtBats batting_average outs player_type ## 1 Player01 3 4 0.75 1 great ## 2 Player02 1 4 0.25 3 good ## 3 Player03 0 3 0.00 3 bad ## 4 PlayerNew 2 5 0.40 3 good ## 5 Player05 4 4 1.00 0 great you can use the table function to see how many of each type of player you have. table(hits_data_frame$player_type) ## ## bad good great ## 1 2 2 10.0.1 Challenge Create a team variable with a while loop or for loop to look at each players player_type. If they player_type is great, then assign them to the Cardinals. If the player type is good, then send them to the Twins. If a player_type is bad then assign them to the Dodgers "],["creating-functions-.html", "Chapter 11 Creating functions.", " Chapter 11 Creating functions. Functions are use full when you want to reuse steps to complete a process. In this example we are going to create a function that returns the amount the batting average based on at-bats and hits. # Create get-average function ## inside the () you must define the input get_average &lt;- function(at_bats, hits ){ # Create the situation where the player has not had any at-bats. We can not calculate average since we are divding by 0 if(at_bats==0){ average= NA } ## Create batting average if(at_bats&gt;0){ average = hits/at_bats } ### use the return() function to define output. return(average) } get_average(172,41) ## [1] 0.2383721 "],["q-and-a.html", "Chapter 12 Q and A", " Chapter 12 Q and A Please think about why you came to this workshop and what you were hoping to get out of it. What are you planning to use R for in the future? Lets have an open discussion about new topics we may have not disscussed yet. "]]
